#
# Copyright (C) 2025 AuxXxilium <https://github.com/AuxXxilium>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Data
on:
  workflow_dispatch:
    inputs:
      push:
        description: "push"
        default: false
        type: boolean
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: page

      - name: Init Env
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

          sudo apt update
          sudo apt install -y locales busybox dialog gettext sed gawk jq curl 
          sudo apt install -y python-is-python3 python3-pip libelf-dev qemu-utils cpio xz-utils lz4 lzma bzip2 gzip zstd
          sudo apt install -y build-essential libtool pkgconf libzstd-dev liblzma-dev libssl-dev

          YQ=$(command -v yq)
          if [ -z "${YQ}" ] || ! ${YQ} --version 2>/dev/null | grep -q "v4."; then
            wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O "${YQ:-"/usr/bin/yq"}" && chmod +x "${YQ:-"/usr/bin/yq"}"
          fi

          # Backup the original python3 executable.
          sudo mv -f "$(realpath $(which python3))/EXTERNALLY-MANAGED" "$(realpath $(which python3))/EXTERNALLY-MANAGED.bak" 2>/dev/null || true
          sudo pip3 install -U -r scripts/requirements.txt

      - name: Get Addon Data for Arc
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status

          REPO="https://github.com/AuxXxilium/arc-addons"

          # Determine the tag to use
          TAG=$(curl -skL --connect-timeout 10 -w '%{url_effective}' -o /dev/null "${REPO}/releases/latest" | awk -F'/' '{print $NF}')

          # Remove leading 'v' if present
          TAG="${TAG#v}"

          # Download the addons zip file
          ZIP_URL="${REPO}/releases/download/${TAG}/addons-${TAG}.zip"
          echo "Downloading ${ZIP_URL}..."
          curl -kL --connect-timeout 10 -o addons.zip "${ZIP_URL}" || { echo "Download failed"; exit 1; }

          # Extract the addons
          mkdir -p "mnt/p3/addons"
          unzip -q addons.zip -d "mnt/p3/addons" || { echo "Failed to unzip addons.zip"; exit 1; }

          # Process .addon files
          find "mnt/p3/addons" -type f -name "*.addon" | while read -r addon_file; do
            addon_dir="mnt/p3/addons/$(basename "${addon_file}" .addon)"
            mkdir -p "${addon_dir}"
            tar -xaf "${addon_file}" -C "${addon_dir}" || { echo "Failed to extract ${addon_file}"; exit 1; }
          done

          # Clean up
          rm -f addons.zip

      - name: Get Config Data for Arc
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status

          REPO="https://github.com/AuxXxilium/arc-configs"

          # Determine the latest tag
          LATEST_URL=$(curl -skL --connect-timeout 10 -w '%{url_effective}' -o /dev/null "${REPO}/releases/latest")
          TAG="${LATEST_URL##*/}"

          # Remove leading 'v' if present
          TAG="${TAG#v}"

          # Download the configs zip file
          ZIP_URL="${REPO}/releases/download/${TAG}/configs-${TAG}.zip"
          echo "Downloading ${ZIP_URL}..."
          curl -kL --connect-timeout 10 -o configs.zip "${ZIP_URL}" || { echo "Download failed"; exit 1; }

          # Extract the configs
          mkdir -p "mnt/p3/configs"
          unzip -q configs.zip -d "mnt/p3/configs" || { echo "Failed to unzip configs.zip"; exit 1; }

          # Clean up
          rm -f configs.zip

      - name: Get Data
        run: |
          curl -L -o mnt/p3/configs/data.yml "https://raw.githubusercontent.com/AuxXxilium/arc-dsm/refs/heads/main/data.yml"

      - name: Process data
        run: |
          python scripts/functions.py getmodels -w "." -j "docs/models.json"
          python scripts/functions.py getaddons -w "." -j "docs/addons.json"
          python scripts/functions.py getpats -w "." -j "docs/pats.json"

      - name: Upload to Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            docs/*.json
          retention-days: 5

      - name: Check and Push
        if: success() && (inputs.push == true || github.event.action == 'created')
        run: |
            echo "Git push ..."
            # git checkout main
            git pull
            status=$(git status -s | grep -E "docs" | awk '{printf " %s", $2}')
            if [ -n "${status}" ]; then
              git add ${status}
              git commit -m "data: update $(date +%Y-%m-%d" "%H:%M:%S)"
              git push -f
            fi