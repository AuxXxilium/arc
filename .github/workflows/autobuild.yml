#
# Copyright (C) 2024 AuxXxilium <https://github.com/AuxXxilium>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build Arc Base Dev

on:
  workflow_dispatch:
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      # Install Dependencies
      - name: Install Dependencies
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

          sudo apt update
          sudo apt install -y jq gawk cpio gettext libelf-dev qemu-utils busybox dialog curl sed
          sudo snap install yq

          df -h

      # calculates the version number and push
      - name: Calculate Version
        run: |
          # Calculate Version
          VERSION="`date +'%y.%m'`.dev"
          
          echo "Version: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      # Get extractor, LKM, Addons, Modules, Theme and Configs
      - name: Get Buildroot
        run: |
          . scripts/func.sh

          echo "Get Dependencies"
          getArcSystem "files/p3" "dev"
          getAddons "files/p3/addons"
          getModules "files/p3/modules"
          getConfigs "files/p3/configs"
          getPatches "files/p3/patches"
          getCustom "files/p3/custom"
          getOffline "files/p3/system/include"
          getLKMs "files/p3/lkms"
          getTheme "files/p1/boot/grub"
          getBuildrootx "brx"

          echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

          echo "OK"

       # Build incremental
      - name: Build Image
        run: |
          . scripts/func.sh

          if [ -n "${VERSION}" ]; then
            # Modify Source File
            echo "${VERSION}" >VERSION
            echo "${VERSION}" >files/p1/ARC-BASE-VERSION
            echo "${VERSION}" >files/p1/ARC-VERSION
            ARCBRANCH="dev"
            echo "${ARCBRANCH}" >files/p1/ARC-BRANCH
            echo "ARCBRANCH=${ARCBRANCH}" >> $GITHUB_ENV
          fi

          echo "Create Arc Image"
          IMAGE_FILE="arc.img"
          gzip -dc "grub.img.gz" >"${IMAGE_FILE}"
          fdisk -l "${IMAGE_FILE}"
          
          LOOPX=$(sudo losetup -f)
          sudo losetup -P "${LOOPX}" "${IMAGE_FILE}"

          echo "Mounting Image File"
          mkdir -p "/tmp/p1"
          mkdir -p "/tmp/p3"
          sudo mount ${LOOPX}p1 "/tmp/p1"
          sudo mount ${LOOPX}p3 "/tmp/p3"

          [ ! -f "brx/bzImage-arc" ] || [ ! -f "brx/initrd-arc" ] && return 1
          
          echo "Repack initrd"
          cp -f "brx/bzImage-arc" "files/p3/bzImage-arc"
          cp -f "brx/initrd-arc" "files/p3/initrd-arc"
          # repackInitrd "brx/initrd-arc" "files/initrd" "files/p3/initrd-arc"

          echo "Copying files"
          sudo cp -Rf "files/p1/"* "/tmp/p1"
          sudo cp -Rf "files/p3/"* "/tmp/p3"
          sync

          echo "Unmount image file"
          sudo umount "/tmp/p1"
          sudo umount "/tmp/p3"
          rmdir "/tmp/p1"
          rmdir "/tmp/p3"

          sudo losetup --detach ${LOOPX}

          echo "Image Converter"
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic arc-dyn.vmdk
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic,subformat=monolithicFlat arc.vmdk
          qemu-img convert ${IMAGE_FILE} -O vhdx -o subformat=dynamic arc.vhdx

      # Zip image and generate checksum
      - name: Pack
        run: |
          if [ -n "${{ env.VERSION }}" ]; then
            zip -9 "arc-${{ env.VERSION }}-${{ env.ARCBRANCH }}.img.zip" arc.img
            zip -9 "arc-${{ env.VERSION }}-${{ env.ARCBRANCH }}.vmdk-dyn.zip" arc-dyn.vmdk
            zip -9 "arc-${{ env.VERSION }}-${{ env.ARCBRANCH }}.vmdk-flat.zip" arc.vmdk arc-flat.vmdk
            zip -9 "arc-${{ env.VERSION }}-${{ env.ARCBRANCH }}.vhdx.zip" arc.vhdx
            (cd files && zip -r ../update-${{ env.VERSION }}-${{ env.ARCBRANCH }}.zip .)
          fi

      # Publish a release if is a tag
      - name: Release
        if: success() && env.VERSION != ''
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          prerelease: true
          makeLatest: false
          allowUpdates: true
          body: |
            ### Information:
            Notice: Development Build
            
            Full Changelog and Arc Patch (Decryption Key) are available in my Discord.

            ### Release
            ${{ env.BUILD_TIME }}
          artifacts: |
            arc-*.zip
            update-*.zip