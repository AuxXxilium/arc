#
# Copyright (C) 2024 AuxXxilium <https://github.com/AuxXxilium>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Custom Build
on:
  issues:
    types:
      - labeled

jobs:
  build:
    if: github.event.label.name == 'custom'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Init Env
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

      - name: Check Custom
        shell: python
        run: |
          # -*- coding: utf-8 -*-
          import json, subprocess
          def set_output(name, value):
            subprocess.call(["echo '{}={}' >> $GITHUB_ENV".format(name, value)], shell=True)

          issuetitle = ${{ toJSON(github.event.issue.title) }};
          issuebody = ${{ toJSON(github.event.issue.body) }};

          MODEL = ''
          PRODUCTVER = ''
          ADDONS = ''
          KERNEL = ''
          FORMAT = ''
          try:
              jsonbody = json.loads(issuebody)
              MODEL = jsonbody.get('model', '')
              PRODUCTVER = jsonbody.get('version', '')
              ADDONS = jsonbody.get('addons', '')
              KERNEL = jsonbody.get('kernel', '')
              FORMAT = jsonbody.get('format', '')
          except ValueError as e:
              pass

          set_output("MODEL", MODEL)
          set_output("PRODUCTVER", PRODUCTVER)
          set_output("ADDONS", ADDONS)
          set_output("KERNEL", KERNEL)
          set_output("FORMAT", FORMAT)

      # calculates the version number and push
      - name: Calculate Version
        run: |
          # Calculate Version
          VERSION="`date +'%y.%-m.%-d'`-custom"

          echo "Version: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Update Comment Building
        id: comment
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            Hi @${{ github.event.issue.user.login }}.  
            arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }} is being build, it will be uploaded here and sent to your email later..  
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}  
            ----

      # Install dependencies
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y jq gawk cpio gettext libelf-dev qemu-utils busybox dialog curl sed
          sudo pip install -r scripts/requirements.txt
          sudo snap install yq

      # Build incremental
      - name: Build image
        run: |
          function getArcSystem() {
            echo "Getting ArcSystem begin"
            local DEST_PATH="${1:-arc}"
            local CACHE_FILE="/tmp/arc.zip"
            rm -f "${CACHE_FILE}"
            if [ -n "${ARCTAG}" ]; then
              TAG="${ARCTAG}"
            else
              TAG="$(curl -s "https://api.github.com/repos/AuxXxilium/arc-system/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-system/releases/download/${TAG}/system-${TAG}.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip System
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            unzip "${CACHE_FILE}" -d "${DEST_PATH}"
            rm -f "${CACHE_FILE}"
            echo "Getting ArcSystem end - ${TAG}"
          }

          function getLKMs() {
            echo "Getting LKMs begin"
            local DEST_PATH="${1:-lkms}"
            local CACHE_FILE="/tmp/rp-lkms.zip"
            rm -f "${CACHE_FILE}"
            if [ -n "${LKMTAG}" ]; then
              TAG="${LKMTAG}"
            else
              TAG="$(curl -s "https://api.github.com/repos/AuxXxilium/arc-lkm/releases/latest" | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-lkm/releases/download/${TAG}/rp-lkms.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip LKMs
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            unzip "${CACHE_FILE}" -d "${DEST_PATH}"
            rm -f "${CACHE_FILE}"
            echo "Getting LKMs end - ${TAG}"
          }

          function getAddons() {
            echo "Getting Addons begin"
            local DEST_PATH="${1:-addons}"
            local CACHE_DIR="/tmp/addons"
            local CACHE_FILE="/tmp/addons.zip"
            if [ -n "${ADDONSTAG}" ]; then
              TAG="${ADDONSTAG}"
            else
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-addons/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-addons/releases/download/${TAG}/addons.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            # Install Addons
            rm -rf "${CACHE_DIR}"
            mkdir -p "${CACHE_DIR}"
            unzip "${CACHE_FILE}" -d "${CACHE_DIR}"
            echo "Installing Addons to ${DEST_PATH}"
            [ -f /tmp/addons/VERSION ] && cp -f /tmp/addons/VERSION ${DEST_PATH}/
            for PKG in $(ls ${CACHE_DIR}/*.addon); do
              ADDON=$(basename "${PKG}" .addon)
              mkdir -p "${DEST_PATH}/${ADDON}"
              echo "Extracting ${PKG} to ${DEST_PATH}/${ADDON}"
              tar -xaf "${PKG}" -C "${DEST_PATH}/${ADDON}"
            done
            rm -f "${CACHE_FILE}"
            echo "Getting Addons end - ${TAG}"
          }

          function getModules() {
            echo "Getting Modules begin"
            local DEST_PATH="${1:-modules}"
            local PLATFORM="${2}"
            local KVERP="${3}"
            local CACHE_FILE="/tmp/${PLATFORM}-${KVERP}.modules"
            local CACHE_FILE_FIRMWARE="/tmp/firmware.modules"
            rm -f "${CACHE_FILE}"
            if [ -n "${MODULESTAG}" ]; then
              TAG="${MODULESTAG}"
            else
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-modules/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-modules/releases/download/${TAG}/${PLATFORM}-${KVERP}.modules" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-modules/releases/download/${TAG}/firmware.modules" -o "${CACHE_FILE_FIRMWARE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip Modules
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            cp -f "${CACHE_FILE}" "${DEST_PATH}"
            cp -f "${CACHE_FILE_FIRMWARE}" "${DEST_PATH}"
            rm -f "${CACHE_FILE}" "${CACHE_FILE_FIRMWARE}"
            echo "Getting Modules end - ${TAG}"
          }

          function getConfigs() {
            echo "Getting Configs begin"
            local DEST_PATH="${1:-configs}"
            local CACHE_FILE="/tmp/configs.zip"
            rm -f "${CACHE_FILE}"
            if [ -n "${CONFIGSTAG}" ]; then
              TAG="${CONFIGSTAG}"
            else
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-configs/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-configs/releases/download/${TAG}/configs.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip Configs
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            unzip "${CACHE_FILE}" -d "${DEST_PATH}"
            rm -f "${CACHE_FILE}"
            echo "Getting Configs end - ${TAG}"
          }

          function getPatches() {
            echo "Getting Patches begin"
            local DEST_PATH="${1:-patches}"
            local CACHE_FILE="/tmp/patches.zip"
            rm -f "${CACHE_FILE}"
            if [ -n "${PATCHESTAG}" ]; then
              TAG="${PATCHESTAG}"
            else
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-patches/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-patches/releases/download/${TAG}/patches.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip Patches
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            unzip "${CACHE_FILE}" -d "${DEST_PATH}"
            rm -f "${CACHE_FILE}"
            echo "Getting Patches end - ${TAG}"
          }

          function getCustom() {
            echo "Getting Custom begin"
            local DEST_PATH="${1:-custom}"
            local CACHE_FILE="/tmp/custom.zip"
            rm -f "${CACHE_FILE}"
            if [ -n "${CUSTOMTAG}" ]; then
              TAG="${CUSTOMTAG}"
            else
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-custom/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-custom/releases/download/${TAG}/custom.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip Custom
            rm -rf "${DEST_PATH}"
            mkdir -p "${DEST_PATH}"
            unzip "${CACHE_FILE}" -d "${DEST_PATH}"
            rm -f "${CACHE_FILE}"
            echo "Getting Custom end - ${TAG}"
          }

          function getTheme() {
            echo "Getting Theme begin"
            local DEST_PATH="${1:-theme}"
            local CACHE_FILE="/tmp/theme.zip"
            rm -f "${CACHE_FILE}"
            if [ -n "${THEMETAG}" ]; then
              TAG="${THEMETAG}"
            else
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-theme/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-theme/releases/download/${TAG}/arc-theme.zip" -o "${CACHE_FILE}")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1
            # Unzip Theme
            mkdir -p "${DEST_PATH}"
            unzip "${CACHE_FILE}" -d "${DEST_PATH}"
            rm -f "${CACHE_FILE}"
            echo "Getting Theme end - ${TAG}"
          }

          function getBuildrootx() {
            echo "Getting Buildroot-X begin"
            TAG="${1:-latest}"
            local DEST_PATH="${2:-brx}"

            if [ "${TAG}" = "latest" ]; then
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-buildroot-x/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            [ ! -d "${DEST_PATH}" ] && mkdir -p "${DEST_PATH}"
            rm -f "${DEST_PATH}/bzImage-arc"
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-buildroot-x/releases/download/${TAG}/bzImage" -o "${DEST_PATH}/bzImage-arc")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1

            rm -f "${DEST_PATH}/initrd-arc"
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-buildroot-x/releases/download/${TAG}/rootfs.cpio.xz" -o "${DEST_PATH}/initrd-arc")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1

            echo "Getting Buildroot-X end - ${TAG}"
          }

          function getBuildroots() {
            echo "Getting Buildroot-S begin"
            TAG="${1:-latest}"
            local DEST_PATH="${2:-brs}"

            if [ "${TAG}" = "latest" ]; then
              TAG="$(curl -s https://api.github.com/repos/AuxXxilium/arc-buildroot-s/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')"
            fi
            [ ! -d "${DEST_PATH}" ] && mkdir -p "${DEST_PATH}"
            rm -f "${DEST_PATH}/bzImage-arc"
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-buildroot-s/releases/download/${TAG}/bzImage" -o "${DEST_PATH}/bzImage-arc")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1

            rm -f "${DEST_PATH}/initrd-arc"
            STATUS=$(curl -w "%{http_code}" -L "https://github.com/AuxXxilium/arc-buildroot-s/releases/download/${TAG}/rootfs.cpio.xz" -o "${DEST_PATH}/initrd-arc")
            echo "TAG=${TAG}; Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1

            echo "Getting Buildroot-S end - ${TAG}"
          }

          function getOffline() {
            echo "Getting Offline begin"
            local DEST_PATH="${1:-configs}"

            [ ! -d "${DEST_PATH}" ] && mkdir -p "${DEST_PATH}"
            rm -f "${DEST_PATH}/offline.json"
            STATUS=$(curl -w "%{http_code}" -L "https://autoupdate.synology.com/os/v2" -o "${DEST_PATH}/offline.json")
            echo "Status=${STATUS}"
            [ ${STATUS} -ne 200 ] && exit 1

            echo "Getting Offline end"
          }

          function repackInitrd() {
            INITRD_FILE="${1}"
            PLUGIN_PATH="${2}"
            OUTPUT_PATH="${3:-${INITRD_FILE}}"

            [ -z "${INITRD_FILE}" ] || [ ! -f "${INITRD_FILE}" ] && exit 1
            [ -z "${PLUGIN_PATH}" ] || [ ! -d "${PLUGIN_PATH}" ] && exit 1
            
            INITRD_FILE="$(readlink -f "${INITRD_FILE}")"
            PLUGIN_PATH="$(readlink -f "${PLUGIN_PATH}")"
            OUTPUT_PATH="$(readlink -f "${OUTPUT_PATH}")"

            RDXZ_PATH="rdxz_tmp"
            mkdir -p "${RDXZ_PATH}"
            (
              cd "${RDXZ_PATH}"
              sudo xz -dc <"${INITRD_FILE}" | sudo cpio -idm
            ) || true
            sudo cp -Rf "${PLUGIN_PATH}/"* "${RDXZ_PATH}/"
            [ -f "${OUTPUT_PATH}" ] && rm -rf "${OUTPUT_PATH}"
            (
              cd "${RDXZ_PATH}"
              sudo find . 2>/dev/null | sudo cpio -o -H newc -R root:root | xz -9 --check=crc32 >"${OUTPUT_PATH}"
            ) || true
            sudo rm -rf "${RDXZ_PATH}"
          }

          function resizeImg() {
            INPUT_FILE="${1}"
            CHANGE_SIZE="${2}"
            OUTPUT_FILE="${3:-${INPUT_FILE}}"

            [[ -z "${INPUT_FILE}" || ! -f "${INPUT_FILE}" ]] && exit 1
            [ -z "${CHANGE_SIZE}" ] && exit 1

            INPUT_FILE="$(readlink -f "${INPUT_FILE}")"
            OUTPUT_FILE="$(readlink -f "${OUTPUT_FILE}")"


            SIZE=$(($(du -m "${INPUT_FILE}" | awk '{print $1}')$(echo "${CHANGE_SIZE}" | sed 's/M//g; s/b//g')))
            [[ -z "${SIZE}" || "${SIZE}" -lt 0 ]] && exit 1

            if [ ! "${INPUT_FILE}" = "${OUTPUT_FILE}" ]; then
              sudo cp -f "${INPUT_FILE}" "${OUTPUT_FILE}"
            fi

            sudo truncate -s ${SIZE}M "${OUTPUT_FILE}"
            echo -e "d\n\nn\n\n\n\n\nn\nw" | sudo fdisk "${OUTPUT_FILE}"
            LOOPX=$(sudo losetup -f)
            sudo losetup -P ${LOOPX} "${OUTPUT_FILE}"
            sudo e2fsck -fp $(ls ${LOOPX}* | sort -n | tail -1)
            sudo resize2fs $(ls ${LOOPX}* | sort -n | tail -1)
            sudo losetup -d ${LOOPX}
          }

          function writeConfigKey() {
            [ "${2}" = "{}" ] && sudo yq eval '.'${1}' = {}' --inplace "${3}" 2>/dev/null || sudo yq eval '.'${1}' = "'"${2}"'"' --inplace "${3}" 2>/dev/null
          }

          function readConfigKey() {
            RESULT=$(sudo yq eval '.'${1}' | explode(.)' "${2}" 2>/dev/null)
            [ "${RESULT}" == "null" ] && echo "" || echo "${RESULT}"
          }

          function readConfigEntriesArray() {
            sudo yq eval '.'${1}' | explode(.) | to_entries | map([.key])[] | .[]' "${2}" 2>/dev/null
          }

          TAG="$(curl -m 5 -kL https://api.github.com/repos/AuxXxilium/arc/releases/latest | grep "tag_name" | awk '{print substr($2, 2, length($2)-3)}')"
          curl -kL "https://github.com/AuxXxilium/arc/releases/download/${TAG}/arc-${TAG}.img.zip" -o "/tmp/arc.img.zip"
          unzip -o "/tmp/arc.img.zip" -d "/tmp"

          echo "Modify Arc Image"
          IMAGE_FILE="/tmp/arc.img"
          fdisk -l "${IMAGE_FILE}"
          
          LOOPX=$(sudo losetup -f)
          sudo losetup -P "${LOOPX}" "${IMAGE_FILE}"

          echo "Mounting image file"
          mkdir -p "/tmp/p1"
          mkdir -p "/tmp/p3"
          sudo mount ${LOOPX}p1 "/tmp/p1"
          sudo mount ${LOOPX}p3 "/tmp/p3"

          echo "Set Custom Config"
          PRESET_CONFIG_FILE="/tmp/p1/user-config.yml"
          sudo touch "${PRESET_CONFIG_FILE}"
          MODEL="${{ env.MODEL }}"
          writeConfigKey "model" "${MODEL}" "${PRESET_CONFIG_FILE}"
          PRODUCTVER="${{ env.PRODUCTVER }}"
          PJ="$(python scripts/functions.py getpats4mv -m "${MODEL}" -v "${PRODUCTVER:0:3}")"
          PAT_URL=$(echo "${PJ}" | jq -r ".\"${PRODUCTVER}\".url")
          PAT_HASH=$(echo "${PJ}" | jq -r ".\"${PRODUCTVER}\".sum")
          writeConfigKey "productver" "${PRODUCTVER:0:3}" "${PRESET_CONFIG_FILE}"
          writeConfigKey "paturl" "${PAT_URL}" "${PRESET_CONFIG_FILE}"
          writeConfigKey "pathash" "${PAT_HASH}" "${PRESET_CONFIG_FILE}"
          echo "Get Configs"
          getConfigs "/tmp/files/configs"
          P_FILE="/tmp/files/configs/platforms.yml"
          PS="$(readConfigEntriesArray "platforms" "${P_FILE}" | sort)"
          MJ="$(python scripts/functions.py getmodels -p "${PS[*]}")"
          echo -n "" >"/tmp/modellist"
          echo "${MJ}" | jq -c '.[]' | while read -r item; do
            name=$(echo "${item}" | jq -r '.name')
            arch=$(echo "${item}" | jq -r '.arch')
            echo "${name} ${arch}" >>"/tmp/modellist"
          done
          PLATFORM="$(grep -w "${MODEL}" "/tmp/modellist" | awk '{print $2}' | head -n 1)"
          writeConfigKey "platform" "${PLATFORM}" "${PRESET_CONFIG_FILE}"
          KVER="$(readConfigKey "platforms.${PLATFORM}.productvers.\"${PRODUCTVER:0:3}\".kver" "${P_FILE}")"
          echo "KVER=${KVER}"
          if [ "${PLATFORM}" == "epyc7002" ]; then
            KVERP="${PRODUCTVER:0:3}-${KVER}"
            writeConfigKey "kernel" "${{ env.KERNEL }}" "${PRESET_CONFIG_FILE}"
          else
            KVERP="${KVER}"
          fi
          echo "KVERP=${KVERP}"
          writeConfigKey "addons" "{}" "${PRESET_CONFIG_FILE}"
          if [ -n "${{ env.ADDONS }}" ]; then
            for A in $(echo "${{ env.ADDONS }}" | tr ',' ' ' | sed 's/\[//g' | sed 's/\]//g'); do
              VALUE=""
              writeConfigKey "addons.\"${A}\"" "${VALUE}" "${PRESET_CONFIG_FILE}"
            done
          fi
          echo "Config File"
          echo "$(cat "${PRESET_CONFIG_FILE}")"
          echo "arc-${MODEL}-${PRODUCTVER:0:3}-${TAG}" >"/tmp/files/automated"
          echo "Download DSM Files"
          DSM_FILE="${PAT_HASH}.tar"
          DSM_URL="https://raw.githubusercontent.com/AuxXxilium/arc-dsm/main/files/${MODEL/+/%2B}/${PRODUCTVER:0:3}/${PAT_HASH}.tar"
          mkdir -p "/tmp/files/users"
          sudo curl -skL "${DSM_URL}" -o "/tmp/files/users/${DSM_FILE}"
          [ -f "/tmp/files/users/${DSM_FILE}" ] && echo "dsm: download successful" || exit 1
          echo "Get ArcSystem"
          getArcSystem "/tmp/files"
          echo "Get Addons"
          getAddons "/tmp/files/addons"
          echo "Get Modules"
          getModules "/tmp/files/modules" "${PLATFORM}" "${KVERP}"
          echo "Get Patches"
          getPatches "/tmp/files/patches"
          echo "Get LKMs"
          getLKMs "/tmp/files/lkms"
          if [ "${{ env.KERNEL }}" == "custom" ]; then
            echo "Get Custom"
            getCustom "/tmp/files/custom"
          fi
          echo "Get Offline"
          getOffline "/tmp/files/system/include"
          sudo cp -vrf /tmp/files/* /tmp/p3/
          echo "Syncing files"
          sync

          echo "Unmount image file"
          sudo umount "/tmp/p1"
          sudo umount "/tmp/p3"
          rmdir "/tmp/p1"
          rmdir "/tmp/p3"

          sudo losetup --detach ${LOOPX}

          cp -f "${IMAGE_FILE}" "arc.img"

          if [ "${{ env.FORMAT }}" = "dyn" ]; then
            echo "Image Converter -> dyn"
            qemu-img convert arc.img -O vmdk -o adapter_type=lsilogic,compat6 arc-dyn.vmdk
          elif [ "${{ env.FORMAT }}" = "flat" ]; then
            echo "Image Converter -> flat"
            qemu-img convert arc.img -O vmdk -o adapter_type=lsilogic,subformat=monolithicFlat,compat6 arc.vmdk
          elif [ "${{ env.FORMAT }}" = "vhdx" ]; then
            echo "Image Converter -> vhdx"
            qemu-img convert arc.img -O vhdx -o subformat=dynamic arc.vhdx
          fi

      # Zip image and generate checksum
      - name: Pack
        run: |
          if [ "${{ env.FORMAT }}" = "img" ]; then
            zip -9 "arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.img.zip" arc.img
            UPLOAD="$(curl -k -F "file=@arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.img.zip" "https://file.io")"
            if ! echo "${UPLOAD}" | grep -oP '"link":\s*"\K[^"]+'; then
              echo "Upload failed"
              exit 1
            fi
          elif [ "${{ env.FORMAT }}" = "dyn" ]; then
            zip -9 "arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.vmdk-dyn.zip" arc-dyn.vmdk
            UPLOAD="$(curl -k -F "file=@arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.vmdk-dyn.zip" "https://file.io")"
            if ! echo "${UPLOAD}" | grep -oP '"link":\s*"\K[^"]+'; then
              echo "Upload failed"
              exit 1
            fi
          elif [ "${{ env.FORMAT }}" = "flat" ]; then
            zip -9 "arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.vmdk-flat.zip" arc.vmdk arc-flat.vmdk
            UPLOAD="$(curl -k -F "file=@arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.vmdk-flat.zip" "https://file.io")"
            if ! echo "${UPLOAD}" | grep -oP '"link":\s*"\K[^"]+'; then
              echo "Upload failed"
              exit 1
            fi
          elif [ "${{ env.FORMAT }}" = "vhdx" ]; then
            zip -9 "arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.vhdx.zip" arc.vhdx
            UPLOAD="$(curl -k -F "file=@arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.vhdx.zip" "https://file.io")"
            if ! echo "${UPLOAD}" | grep -oP '"link":\s*"\K[^"]+'; then
              echo "Upload failed"
              exit 1
            fi
          elif [ "${{ env.FORMAT }}" = "ova" ]; then
            zip -9 "arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.ova.zip" arc.ova
            UPLOAD="$(curl -k -F "file=@arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}.ova.zip" "https://file.io")"
            if ! echo "${UPLOAD}" | grep -oP '"link":\s*"\K[^"]+'; then
              echo "Upload failed"
              exit 1
            fi
          fi

          EMAIL=$(curl -s -H "Authorization: token ${{ secrets.ACTION }}" "https://api.github.com/users/${{ github.event.issue.user.login }}" | jq -r '.email')
          FIOURL="$(echo "${UPLOAD}" | grep -oP '"link":\s*"\K[^"]+')"
          echo "EMAIL=${EMAIL}" >> $GITHUB_ENV
          echo "FIOURL=${FIOURL}" >> $GITHUB_ENV

      - name: Send mail
        if: success() && env.EMAIL != 'null'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: arc-${{ env.model }}-${{ env.PRODUCTVER }}-${{ env.VERSION }}
          to: ${{ env.EMAIL }}
          from: ${{ secrets.MAIL_USERNAME }}
          body: |
            ${{ env.FIOURL }}

      - name: Update Comment Success
        if: success()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.comment.outputs.comment-id }}
          update-mode: replace
          body: |
            Hi @${{ github.event.issue.user.login }}.  
            arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }} is ready to download: ${{ env.FIOURL }}
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            If this will not work, do not use customized Versions!
            ----

      - name: Update Comment Fail
        if: failure()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: ${{ steps.comment.outputs.comment-id }}
          update-mode: replace
          body: |
            Hi @${{ github.event.issue.user.login }}.  
            arc-${{ env.MODEL }}-${{ env.PRODUCTVER }}-${{ env.VERSION }} failed to build and package, please try again.  
            > ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 

            If this will not work, do not use customized Versions!
            ----

      - name: Close Issues
        if: success()
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'close-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
  
  comment:
    if: github.event.label.name == 'bug'
    runs-on: ubuntu-latest
    steps:
      - name: Init Env
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

      - name: Check Issues
        run: |
          if echo "${{ github.event.issue.body }}" | grep -q "Screenshots"; then 
            echo "FALG=true" >> $GITHUB_ENV
          else
            echo "FALG=false" >> $GITHUB_ENV
          fi

      - name: Create Issues comment
        if: env.FALG == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            **Describe the Bug**
            A clear and concise description of what the bug is.
            
            **Screenshots**
            Screenshot the Systeminfo (Arc - Sysinfo) or use new "Full Sysinfo - Upload" Function provide the Code!!! <- IMPORTANT
            
            **Hardware**
            Add your Hardware Informations here. CPU / Board / Networkcontroller / Storagecontroller / ...

      - name: Close Issues
        if: env.FALG == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'close-issue'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}