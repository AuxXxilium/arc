#
# Copyright (C) 2024 AuxXxilium <https://github.com/AuxXxilium>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build Arc Image

on:
  workflow_dispatch:
    inputs:
      version:
        description: "version"
        required: false
        type: string
      notice:
        description: "Notice here"
        required: false
        type: string
      latest:
        description: "latest"
        default: true
        type: boolean
      prerelease:
        description: "pre release"
        default: false
        type: boolean
      clean:
        description: "clean"
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Delete releases and workflows runs
        if: inputs.clean == true
        uses: ophub/delete-releases-workflows@main
        with:
          delete_releases: true
          releases_keep_latest: 1
          delete_workflows: true
          workflows_keep_day: 1
          delete_tags: true
          gh_token: ${{ secrets.GITHUB_TOKEN }}

      # Install Dependencies
      - name: Install Dependencies
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

          sudo apt update
          sudo apt install -y jq gawk cpio gettext libelf-dev qemu-utils busybox dialog curl sed
          sudo snap install yq

          df -h

      # calculates the version number and push
      - name: Calculate Version
        run: |
          # Calculate Version
          VERSION=""
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION="`date +'%y.%m.%d'`"
          fi
          
          echo "Version: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          if [ -n "${VERSION}" ]; then
            echo "${VERSION}" >VERSION
            echo "${VERSION}" >files/p1/ARC-BASE-VERSION
            echo "${VERSION}" >files/p1/ARC-VERSION
          fi

      # Get extractor, LKM, Addons, Modules, Theme and Configs
      - name: Get Dependencies for Minimal Image
        run: |
          . scripts/func.sh

          echo "Get Dependencies"
          getTheme "files/p1/boot/grub"
          getBuildrootx "brx"

          echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

          echo "OK"

       # Build incremental
      - name: Build Minimal Image
        run: |
          . scripts/func.sh

          echo "minimal" >files/p1/ARC-BRANCH

          echo "Create Arc Image"
          IMAGE_FILE="arc.img"
          gzip -dc "grub.img.gz" >"${IMAGE_FILE}"
          fdisk -l "${IMAGE_FILE}"
          
          LOOPX=$(sudo losetup -f)
          sudo losetup -P "${LOOPX}" "${IMAGE_FILE}"

          echo "Mounting Image File"
          mkdir -p "/tmp/p1"
          mkdir -p "/tmp/p3"
          sudo mount ${LOOPX}p1 "/tmp/p1"
          sudo mount ${LOOPX}p3 "/tmp/p3"

          [ ! -f "brx/bzImage-arc" ] || [ ! -f "brx/initrd-arc" ] && return 1
          
          echo "Repack initrd"
          cp -f "brx/bzImage-arc" "files/p3/bzImage-arc"
          cp -f "brx/initrd-arc" "files/p3/initrd-arc"
          # repackInitrd "brx/initrd-arc" "files/initrd" "files/p3/initrd-arc"

          echo "Copying files"
          sudo cp -Rf "files/p1/"* "/tmp/p1"
          sudo cp -Rf "files/p3/"* "/tmp/p3"
          sync

          echo "Unmount image file"
          sudo umount "/tmp/p1"
          sudo umount "/tmp/p3"
          rmdir "/tmp/p1"
          rmdir "/tmp/p3"

          sudo losetup --detach ${LOOPX}

          echo "Image Converter"
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic arc-dyn.vmdk
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic,subformat=monolithicFlat arc.vmdk
          qemu-img convert ${IMAGE_FILE} -O vhdx -o subformat=dynamic arc.vhdx

      # Zip image and generate checksum
      - name: Pack Minimal Image
        run: |
          if [ -n "${{ env.VERSION }}" ]; then
            zip -9 "arc-${{ env.VERSION }}-minimal.img.zip" arc.img
            zip -9 "arc-${{ env.VERSION }}-minimal.vmdk-dyn.zip" arc-dyn.vmdk
            zip -9 "arc-${{ env.VERSION }}-minimal.vmdk-flat.zip" arc.vmdk arc-flat.vmdk
            zip -9 "arc-${{ env.VERSION }}-minimal.vhdx.zip" arc.vhdx
            zip -9j "update-${{ env.VERSION }}-minimal.zip" files/p3/bzImage-arc files/p3/initrd-arc
          fi

      # Get extractor, LKM, Addons, Modules, Theme and Configs
      - name: Get Dependencies for Full Image
        run: |
          . scripts/func.sh

          echo "Get Dependencies"
          getArcSystem "files/p3"
          getAddons "files/p3/addons"
          getModules "files/p3/modules"
          getConfigs "files/p3/configs"
          getPatches "files/p3/patches"
          getCustome "files/p3/custom"
          getOffline "files/p3/configs"
          getTheme "files/p1/boot/grub"
          getBuildrootx "brx"

          echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

          echo "OK"

       # Build incremental
      - name: Build Full Image
        run: |
          . scripts/func.sh

          echo "full" >files/p1/ARC-BRANCH

          echo "Create Arc Image"
          IMAGE_FILE="arc.img"
          gzip -dc "grub.img.gz" >"${IMAGE_FILE}"
          fdisk -l "${IMAGE_FILE}"
          
          LOOPX=$(sudo losetup -f)
          sudo losetup -P "${LOOPX}" "${IMAGE_FILE}"

          echo "Mounting Image File"
          mkdir -p "/tmp/p1"
          mkdir -p "/tmp/p3"
          sudo mount ${LOOPX}p1 "/tmp/p1"
          sudo mount ${LOOPX}p3 "/tmp/p3"

          [ ! -f "brx/bzImage-arc" ] || [ ! -f "brx/initrd-arc" ] && return 1
          
          echo "Repack initrd"
          cp -f "brx/bzImage-arc" "files/p3/bzImage-arc"
          cp -f "brx/initrd-arc" "files/p3/initrd-arc"
          # repackInitrd "brx/initrd-arc" "files/initrd" "files/p3/initrd-arc"

          echo "Copying files"
          sudo cp -Rf "files/p1/"* "/tmp/p1"
          sudo cp -Rf "files/p3/"* "/tmp/p3"
          sync

          echo "Unmount image file"
          sudo umount "/tmp/p1"
          sudo umount "/tmp/p3"
          rmdir "/tmp/p1"
          rmdir "/tmp/p3"

          sudo losetup --detach ${LOOPX}

          echo "Image Converter"
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic arc-dyn.vmdk
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic,subformat=monolithicFlat arc.vmdk
          qemu-img convert ${IMAGE_FILE} -O vhdx -o subformat=dynamic arc.vhdx

          echo "Create Arc ova"
          convertova "${IMAGE_FILE}" "arc.ova"

      # Zip image and generate checksum
      - name: Pack Full Image
        run: |
          if [ -n "${{ env.VERSION }}" ]; then
            zip -9 "arc-${{ env.VERSION }}-full.img.zip" arc.img
            zip -9 "arc-${{ env.VERSION }}-full.vmdk-dyn.zip" arc-dyn.vmdk
            zip -9 "arc-${{ env.VERSION }}-full.vmdk-flat.zip" arc.vmdk arc-flat.vmdk
            zip -9 "arc-${{ env.VERSION }}-full.vhdx.zip" arc.vhdx
            zip -9 "arc-${{ env.VERSION }}-full.ova.zip" arc.ova
            zip -9j "update-${{ env.VERSION }}-full.zip" files/p3/*
          fi

      # Get extractor, LKM, Addons, Modules, Theme and Configs
      - name: Get Dependencies for Stable Image
        run: |
          . scripts/func.sh

          echo "Get Dependencies"
          getArcSystem "files/p3"
          getAddons "files/p3/addons"
          getModules "files/p3/modules"
          getConfigs "files/p3/configs"
          getPatches "files/p3/patches"
          getCustom "files/p3/custom"
          getOffline "files/p3/configs"
          getTheme "files/p1/boot/grub"
          getBuildroots "brs"

          echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

          echo "OK"

       # Build incremental
      - name: Build Stable Image
        run: |
          . scripts/func.sh

          echo "stable" >files/p1/ARC-BRANCH

          echo "Create Arc Image"
          IMAGE_FILE="arc-stable.img"
          gzip -dc "grub.img.gz" >"${IMAGE_FILE}"
          fdisk -l "${IMAGE_FILE}"
          
          LOOPX=$(sudo losetup -f)
          sudo losetup -P "${LOOPX}" "${IMAGE_FILE}"

          echo "Mounting Image File"
          mkdir -p "/tmp/p1"
          mkdir -p "/tmp/p3"
          sudo mount ${LOOPX}p1 "/tmp/p1"
          sudo mount ${LOOPX}p3 "/tmp/p3"

          [ ! -f "brs/bzImage-arc" ] || [ ! -f "brs/initrd-arc" ] && return 1
          
          echo "Repack initrd"
          cp -f "brs/bzImage-arc" "files/p3/bzImage-arc"
          cp -f "brs/initrd-arc" "files/p3/initrd-arc"
          # repackInitrd "brx/initrd-arc" "files/initrd" "files/p3/initrd-arc"

          echo "Copying files"
          sudo cp -Rf "files/p1/"* "/tmp/p1"
          sudo cp -Rf "files/p3/"* "/tmp/p3"
          sync

          echo "Unmount image file"
          sudo umount "/tmp/p1"
          sudo umount "/tmp/p3"
          rmdir "/tmp/p1"
          rmdir "/tmp/p3"

          sudo losetup --detach ${LOOPX}

          echo "Image Converter"
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic arc-stable-dyn.vmdk
          qemu-img convert ${IMAGE_FILE} -O vmdk -o adapter_type=lsilogic,subformat=monolithicFlat arc-stable.vmdk
          qemu-img convert ${IMAGE_FILE} -O vhdx -o subformat=dynamic arc-stable.vhdx

          echo "Create Arc ova"
          convertova "${IMAGE_FILE}" "arc-stable.ova"

      # Zip image and generate checksum
      - name: Pack Stable Image
        run: |
          if [ -n "${{ env.VERSION }}" ]; then
            zip -9 "arc-${{ env.VERSION }}-stable.img.zip" arc-stable.img
            zip -9 "arc-${{ env.VERSION }}-stable.vmdk-dyn.zip" arc-stable-dyn.vmdk
            zip -9 "arc-${{ env.VERSION }}-stable.vmdk-flat.zip" arc-stable.vmdk arc-stable-flat.vmdk
            zip -9 "arc-${{ env.VERSION }}-stable.vhdx.zip" arc-stable.vhdx
            zip -9 "arc-${{ env.VERSION }}-stable.ova.zip" arc-stable.ova
            zip -9j "update-${{ env.VERSION }}-stable.zip" files/p3/*
          fi

      # Publish a release if is a tag
      - name: Release
        if: success() && env.VERSION != ''
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.VERSION }}
          prerelease: ${{ inputs.prerelease }}
          makeLatest: ${{ inputs.latest }}
          allowUpdates: true
          body: |
            ### Information:
            Notice: ${{ inputs.notice }}
            
            Full Changelog and Arc Patch (Decryption Key) are available in my Discord.

            ### Versions:
              - minimal: Minimal Image (only Bootimage, all dependencies will be loaded from the Internet, more features/hardware support)
              - full: Full Image (Full Image, all dependencies are included, DSM files will be loaded from the Internet, more features/hardware support)
              - stable: Stable Image (Full Image, all dependencies are included, DSM files will be loaded from the Internet, less features/hardware support)

            ### Release
            ${{ env.BUILD_TIME }}
          artifacts: |
            arc-*.zip
            update-*.zip
