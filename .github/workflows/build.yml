#
# Copyright (C) 2025 AuxXxilium
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build Arc Image

on:
  workflow_dispatch:
    inputs:
      runs:
        description: "runs-on"
        type: choice
        options:
          - ubuntu-latest
          - self-hosted
      version:
        description: "version (1.0.0)"
        required: true
        type: string
      notice:
        description: "Notice here"
        required: false
        type: string
      stable:
        description: "stable"
        default: false
        type: boolean
      beta:
        description: "beta"
        default: false
        type: boolean
      essential:
        description: "essential"
        default: false
        type: boolean

jobs:
  build:
    runs-on: ${{ inputs.runs }}
    steps:
      - name: Checkout
        uses: actions/checkout@main

      # Install Dependencies
      - name: Install Dependencies
        if: ${{ inputs.runs == 'ubuntu-latest' }}
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

          sudo apt update
          sudo apt install -y locales busybox dialog gettext sed gawk jq curl
          sudo apt install -y python-is-python3 python3-pip libelf-dev qemu-utils cpio xz-utils lz4 lzma bzip2 gzip zstd
          if ! command -v yq &>/dev/null || ! yq --version 2>/dev/null | grep -q "v4."; then
            sudo curl -kL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/bin/yq && sudo chmod a+x /usr/bin/yq
          fi

          df -h

      # Get Dependencies
      - name: Get Dependencies
        run: |
          . scripts/functions.sh "${{ secrets.BUILD_TOKEN }}"

          echo "Get Dependencies"
          getAddons "files/p3/addons"
          getModules "files/p3/modules"
          getConfigs "files/p3/configs"
          getPatches "files/p3/patches"
          getCustom "files/p3/custom"
          getOffline "files/p3/configs"
          getLKMs "files/p3/lkms"
          getTheme "files/p1/boot/grub"
          getBuildroot "essential" "bre"
          echo "BRETAG=${BRTAG}" >> $GITHUB_ENV

          # Export Dependencies Version to env
          echo "ADDONTAG=${ADDONTAG}" >> $GITHUB_ENV
          echo "MODULETAG=${MODULETAG}" >> $GITHUB_ENV
          echo "CONFIGTAG=${CONFIGTAG}" >> $GITHUB_ENV
          echo "PATCHTAG=${PATCHTAG}" >> $GITHUB_ENV
          echo "CUSTOMTAG=${CUSTOMTAG}" >> $GITHUB_ENV
          echo "LKMTAG=${LKMTAG}" >> $GITHUB_ENV
          echo "THEMETAG=${THEMETAG}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

          echo "OK"

      # Cleanup Dependencies for Essential Image
      - name: Cleanup Dependencies
        if: ${{ inputs.essential == true }}
        run: |
          # Cleanup
          rm -f files/p3/modules/*-4.4.180.tgz
          rm -f files/p3/modules/*-4.4.302.tgz
          rm -f files/p3/lkms/*-4.4.180-*.tgz
          rm -f files/p3/lkms/*-4.4.302-*.tgz
          sed -i 's|Arc |Arc Essential |' files/initrd/opt/arc/include/consts.sh
          sed -i 's|platforms.yml|platforms-essential.yml|g' files/initrd/opt/arc/include/consts.sh
          sed -i 's|https://api.github.com/repos/AuxXxilium/arc/releases|https://api.github.com/repos/AuxXxilium/arc-essential/releases|g' files/initrd/opt/arc/include/consts.sh
          sed -i 's|https://github.com/AuxXxilium/arc/releases/download|https://github.com/AuxXxilium/arc-essential/releases/download|g' files/initrd/opt/arc/include/consts.sh
          sed -i '/2 \"Beta \${BETATAG}\" \\/d' files/initrd/opt/arc/arc-functions.sh
          sed -i '/3 "Update Dependencies \\Z1(maybe not stable)\\Zn" \\/d' files/initrd/opt/arc/arc-functions.sh

          echo "Cleaned"

      # Build incremental
      - name: Build Image
        run: |
          . scripts/functions.sh

          ARC_BUILD="$(date +'%y%m%d')"
          ARC_VERSION="${{ inputs.version }}"
          if ${{ inputs.essential }}; then
            ARC_BRANCH="essential"
          else
            ARC_BRANCH="evo"
          fi
          echo "${ARC_BUILD}" > "files/p1/ARC-BUILD"
          echo "ARC_BUILD=${ARC_BUILD}" >> $GITHUB_ENV
          echo "${ARC_VERSION}" > "files/p1/ARC-VERSION"
          if ${{ inputs.essential }}; then
            echo "essential" > "files/p1/ARC-BRANCH"
          else
            echo "full" > "files/p1/ARC-BRANCH"
          fi
          echo "ARC_BRANCH=${ARC_BRANCH}" >> $GITHUB_ENV
          echo "ARC_VERSION=${ARC_VERSION}" >> $GITHUB_ENV

          echo "Create Arc Image"
          IMAGE_FILE="arc.img"
          gzip -dc "files/initrd/opt/arc/grub.img.gz" >"${IMAGE_FILE}"
          fdisk -l "${IMAGE_FILE}"
          
          LOOPX=$(sudo losetup -f)
          sudo losetup -P "${LOOPX}" "${IMAGE_FILE}"

          echo "Mounting Image File"
          mkdir -p "/tmp/p1"
          mkdir -p "/tmp/p3"
          sudo mount ${LOOPX}p1 "/tmp/p1"
          sudo mount ${LOOPX}p3 "/tmp/p3"

          [ ! -f "bre/bzImage-arc" ] || [ ! -f "bre/initrd-arc" ] && exit 1

          echo "Repack initrd"
          cp -f "bre/bzImage-arc" "files/p3/bzImage-arc"
          repackInitrd "bre/initrd-arc" "files/initrd" "files/p3/initrd-arc"

          echo "Copying files"
          sudo cp -rf "files/p1/"* "/tmp/p1"
          sudo cp -rf "files/p3/"* "/tmp/p3"
          sudo sync

          echo "Unmount image file"
          sudo umount "/tmp/p1"
          sudo umount "/tmp/p3"
          rmdir "/tmp/p1"
          rmdir "/tmp/p3"

          sudo losetup --detach ${LOOPX}

          echo "Image Converter"
          qemu-img convert -p -f raw -O vmdk ${IMAGE_FILE} arc-dyn.vmdk
          qemu-img convert -p -f raw -o subformat=monolithicFlat -O vmdk ${IMAGE_FILE} arc.vmdk

          echo "Create Arc vhd"
          createvmc "arc.vmc"
          qemu-img convert -p -f raw -O vpc ${IMAGE_FILE} arc.vhd

          echo "Create Arc ova"
          convertova "${IMAGE_FILE}" "arc.ova"

      # Zip image and generate checksum
      - name: Pack Image
        if: success() && env.ARC_VERSION != ''
        run: |
          zip -9 "arc-${{ env.ARC_VERSION }}.img.zip" arc.img
          zip -9 "arc-${{ env.ARC_VERSION }}.vmdk-dyn.zip" arc-dyn.vmdk
          zip -9 "arc-${{ env.ARC_VERSION }}.vmdk-flat.zip" arc.vmdk arc-flat.vmdk
          zip -9 "arc-${{ env.ARC_VERSION }}.vhd.zip" arc.vhd arc.vmc
          zip -9 "arc-${{ env.ARC_VERSION }}.ova.zip" arc.ova
          (cd files && zip -r ../update-${{ env.ARC_VERSION }}.zip ./p1 ./p3)
          sha256sum update-${{ env.ARC_VERSION }}.zip >"update-${{ env.ARC_VERSION }}.hash"

      # Beta Release
      - name: Beta Release
        if: success() && env.ARC_VERSION != '' && inputs.beta == true
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.ARC_VERSION }}
          makeLatest: true
          allowUpdates: true
          owner: ${{ github.repo.owner }}
          repo: arc-beta
          token: ${{ secrets.BUILD_TOKEN }}
          body: |
            ### Note:
              - ${{ inputs.notice }}

            ### Information:
              - Beta Release may not be stable. Use with caution as it is intended for testing purposes only.

            ### Dependencies:
              - Addons: ${{ env.ADDONTAG }}
              - Modules: ${{ env.MODULETAG }}
              - Configs: ${{ env.CONFIGTAG }}
              - Patches: ${{ env.PATCHTAG }}
              - Custom: ${{ env.CUSTOMTAG }}
              - LKMs: ${{ env.LKMTAG }}
              - Basesystem: ${{ env.BRETAG }}
              - Build: ${{ env.BUILD_TIME }}
          artifacts: |
            arc-*.zip
            update-*.zip
            update-*.hash

      # Stable Release
      - name: Stable Release
        if: success() && env.ARC_VERSION != '' && inputs.stable == true
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.ARC_VERSION }}
          makeLatest: true
          allowUpdates: true
          owner: ${{ github.repo.owner }}
          repo: arc
          token: ${{ secrets.BUILD_TOKEN }}
          body: |
            ### Note:
              - ${{ inputs.notice }}

            ### Information:
              - [Release Notes](https://xpenology.tech/release/${{ env.ARC_VERSION }}.txt)

            ### Dependencies:
              - Addons: ${{ env.ADDONTAG }}
              - Modules: ${{ env.MODULETAG }}
              - Configs: ${{ env.CONFIGTAG }}
              - Patches: ${{ env.PATCHTAG }}
              - Custom: ${{ env.CUSTOMTAG }}
              - LKMs: ${{ env.LKMTAG }}
              - Basesystem: ${{ env.BRETAG }}
              - Build: ${{ env.BUILD_TIME }}
          artifacts: |
            arc-*.zip
            update-*.zip
            update-*.hash

      # Essential Release
      - name: Essential Release
        if: success() && env.ARC_VERSION != '' && inputs.essential == true
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.ARC_VERSION }}
          makeLatest: true
          allowUpdates: true
          owner: ${{ github.repo.owner }}
          repo: arc-essential
          token: ${{ secrets.BUILD_TOKEN }}
          body: |
            ### Note:
              - ${{ inputs.notice }}

            ### Information:
              - [Release Notes](https://xpenology.tech/release/${{ env.ARC_VERSION }}.txt)

            ### Dependencies:
              - Addons: ${{ env.ADDONTAG }}
              - Modules: ${{ env.MODULETAG }}
              - Configs: ${{ env.CONFIGTAG }}
              - Patches: ${{ env.PATCHTAG }}
              - Custom: ${{ env.CUSTOMTAG }}
              - LKMs: ${{ env.LKMTAG }}
              - Basesystem: ${{ env.BRETAG }}
              - Build: ${{ env.BUILD_TIME }}
          artifacts: |
            arc-*.zip
            update-*.zip
            update-*.hash