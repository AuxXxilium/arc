#
# Copyright (C) 2023 AuxXxilium <https://github.com/AuxXxilium> and Ing <https://github.com/wjz304>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Build Arc

on:
  workflow_dispatch:
    inputs:
      version:
        description: "format %y.%-m.$i or auto"
        required: false
        type: string
      prerelease:
        description: "pre release"
        default: false
        type: boolean
      clean:
        description: "clean"
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Clean Old
        if: inputs.clean == true
        uses: Nats-ji/delete-old-releases@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          keep-count: 10
          keep-old-minor-releases: false

      - name: Changelog
        uses: Bullrich/generate-release-changelog@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      # Install Dependencies
      - name: Install Dependencies
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin"

          # Clean up disk space
          docker rmi $(docker images -q)

          sudo apt update
          sudo apt install -y jq gawk gettext libelf-dev qemu-utils
          sudo snap install yq

      # Check dl cache
      - name: Cache Downloads
        id: dl-cache
        uses: actions/cache@v3
        with:
          path: ~/dl
          key: ${{ runner.os }}-dl

      # Check buildroot cache
      - name: Cache Buildroot
        id: br-cache
        uses: actions/cache@v3
        with:
          path: .buildroot
          key: ${{ runner.os }}-${{ hashFiles('files/configs/arc_defconfig') }}

      # Clone buildroot repository (if not cached)
      - name: Clone Buildroot
        if: steps.br-cache.outputs.cache-hit != 'true'
        run: |
          git clone --single-branch -b 2023.02.x https://github.com/buildroot/buildroot.git .buildroot
          # Copy files
          echo "Copying files"
          cp -Ru files/* .buildroot
          cd .buildroot
          echo "Generating default config"
          make BR2_EXTERNAL=../external arc_defconfig

      # Download sources if not cached
      - name: Download Buildroot Packages Source
        if: steps.dl-cache.outputs.cache-hit != 'true'
        run: |
          cd .buildroot
          make BR2_EXTERNAL=../external source

      # Prepare buildroot for first make
      - name: Prepare Buildroot
        if: steps.br-cache.outputs.cache-hit != 'true'
        run: |
          echo "First make"
          cd .buildroot
          make BR2_EXTERNAL=../external

      # calculates the version number and push
      - name: Calculate Version
        run: |
          # Calculate Version
          VERSION=""
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            LATEST_TAG="`curl -skL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name" 2>/dev/null`"
            if [ -n "${LATEST_TAG}" -a "`echo ${LATEST_TAG} | cut -d '.' -f 1,2`" = "`date +'%y.%-m'`" ]; then  # format %y.%-m.$i
              VERSION="`echo ${LATEST_TAG} | awk -F '.' '{$3=$3+1}1' OFS='.'`"
            else
              VERSION="`date +'%y.%-m'`.0"
            fi
          fi

          echo "Version: ${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

          if [ -n "${VERSION}" ]; then
            # Modify Source File
            echo "${VERSION}" >VERSION
            echo "${VERSION}" >files/board/arc/p1/ARC-VERSION
            sed 's/^ARC_VERSION=.*/ARC_VERSION="'${VERSION}'"/' -i files/board/arc/overlayfs/opt/arc/include/consts.sh
          fi

      # Get extractor, LKM, Addons, Modules and Configs
      - name: Get extractor, LKM, Addons, Extensions, Modules and Configs
        run: |
          . scripts/func.sh

          getExtractor "files/board/arc/p3/extractor"
          getLKMs "files/board/arc/p3/lkms"
          getAddons "files/board/arc/p3/addons"
          getExtensions "files/board/arc/p3/extensions"
          getModules "files/board/arc/p3/modules"
          getConfigs "files/board/arc/p3/configs"

          echo "OK"

      # Build incremental from caches
      - name: Build Image
        run: |
          # Remove old files
          rm -rf .buildroot/output/target/opt/arc
          rm -rf .buildroot/board/arc/overlayfs
          rm -rf .buildroot/board/arc/p1
          rm -rf .buildroot/board/arc/p3

          # Copy files
          echo "Copying files"
          cp -Ru files/* .buildroot/

          cd .buildroot
          echo "Generating default config"
          make BR2_EXTERNAL=../external arc_defconfig
          echo "Building..."
          make BR2_EXTERNAL=../external
          cd -
          qemu-img convert -O vmdk arc.img arc-dyn.vmdk
          qemu-img convert -O vmdk -o adapter_type=lsilogic arc.img -o subformat=monolithicFlat arc.vmdk

      # Zip image and generate checksum
      - name: Pack
        run: |
          if [ -n "${{ env.VERSION }}" ]; then
            zip -9 "arc-${{ env.VERSION }}.img.zip" arc.img
            zip -9 "arc-${{ env.VERSION }}.vmdk-dyn.zip" arc-dyn.vmdk
            zip -9 "arc-${{ env.VERSION }}.vmdk-flat.zip" arc.vmdk arc-flat.vmdk
          else
            zip -9 "arc.img.zip" arc.img
          fi
          sha256sum update-list.yml update-check.sh > sha256sum
          zip -9j update.zip update-list.yml update-check.sh
          while read -r F; do
            if [ -d "${F}" ]; then
              FTGZ="$(basename "${F}").tgz"
              tar -czf "${FTGZ}" -C "${F}" .
              sha256sum "${FTGZ}" >> sha256sum
              zip -9j update.zip "${FTGZ}"
              rm "${FTGZ}"
            else
              (cd $(dirname ${F}) && sha256sum $(basename ${F})) >> sha256sum
              zip -9j update.zip "${F}"
            fi
          done < <(yq '.replace | explode(.) | to_entries | map([.key])[] | .[]' update-list.yml)
          zip -9j update.zip sha256sum

      # Upload artifact
      - name: Upload
        uses: actions/upload-artifact@v3
        if: env.VERSION != ''
        with:
          name: Images
          path: |
            update.zip
          retention-days: 5

      # Publish a release if is a tag
      - name: Release
        uses: softprops/action-gh-release@v1
        if: env.VERSION != ''
        with:
          tag_name: ${{ env.VERSION }}
          prerelease: ${{ inputs.prerelease }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          files: |
            arc-${{ env.VERSION }}.img.zip
            arc-${{ env.VERSION }}.vmdk-dyn.zip
            arc-${{ env.VERSION }}.vmdk-flat.zip
            update.zip